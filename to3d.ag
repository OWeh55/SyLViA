#include <fstream>
#include <iostream>
#include <string>
#include "v23d.h"
#include "image.h"
#include "FileName.h"

#include "v2trafo.h"
#include "v2file.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Extract 3d data for triangle viewer
  para: filename, required, string, baseFileName, Filename of phase or texture image, ""
  opt: c, calibfile, string, calibFilename, Name of calibration file,""
  opt: p, phaseresolution, double, phaseResolution, Resolution of phase image, 32.0
  opt: x, xmin, double, xMin, minimum x, -10000
  opt: X, xmax, double, xMax, maximum x, 10000
  opt: y, ymin, double, yMin, minimum y, -10000
  opt: Y, ymax, double, yMax, maximum y, 10000
  opt: z, zmin, double, zMin, minimum z, -10000
  opt: Z, zmax, double, zMax, maximum z, 10000
  opt: l, maxlength, double, maxLength, maximum length of triangle edges, 1000

  opt: s, smear, int, sSize, Size for averaging, 0
  opt: n, nocolor, void, noColor, Ignore texture, false
  opt2:   storage of texture depends on output format

  opt: o, outfilename, String, outFile, Name of output file, ""
  opt: d, display, void, display, display images, false
  opt: D, debug, Int, debug, print debug information, 0
  opt: v, verbose, Void, verbose, be verbose, false
  opt: h, help, usage, , Help
AppGen*/

// class that contains all 3d data (pointcloud level)
// does not contain u,v that are implizit in array idx
// at the moment more or less a struct
class SPixel
{
public:
  SPixel():
    color(0), phase(0), position(0, 0, 0), valid(false), selected(false), nr(-1)
  {
  }
  ColorValue color;
  double phase;
  Vector3d position;
  bool valid;
  bool selected;
  int nr;
};

typedef matrix<SPixel> SWorld;

class SelectBox
{
public:
  SelectBox(double xMin, double xMax,
            double yMin, double yMax,
            double zMin, double zMax):
    xMin(xMin), xMax(xMax),
    yMin(yMin), yMax(yMax),
    zMin(zMin), zMax(zMax)
  {
  };
  bool inRange(const Vector3d& xyz)
  {
    return  xyz.x >= xMin && xyz.x <= xMax &&
            xyz.y >= yMin && xyz.y <= yMax &&
            xyz.z >= zMin && xyz.z <= zMax;
  }
private:
  double xMin;
  double xMax;
  double yMin;
  double yMax;
  double zMin;
  double zMax;
};

void compute3d(const SLModel& model, SWorld& world)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        SPixel& here = world[x][y];
        if (here.phase != 0.0)
          {
            Point uv(x, y);
            model.reconstruct(uv, here.phase, here.position);
            here.valid = true;
          }
        else
          here.valid = false;
      }
}

void updateStateImage(const SWorld& world, Image& state)
{
  WindowWalker w(state);
  for (w.init(); !w.ready(); w.next())
    {
      const SPixel& here = world[w.x][w.y];
      int s = 0;
      if (!here.valid)
        s += 1;
      if (!here.selected)
        s += 2;
      state.setPixel(w, s);
    }
}

void selectPixelInBox(SWorld& world, SelectBox& box)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        SPixel& here = world[x][y];
        here.selected = box.inRange(here.position);
      }
}

void maxColorValue(ColorValue& maxVal, const ColorValue& c)
{
  if (c.red > maxVal.red)
    maxVal.red = c.red;
  if (c.green > maxVal.green)
    maxVal.green = c.green;
  if (c.blue > maxVal.blue)
    maxVal.blue = c.blue;
}

ColorValue getMaxColorValue(const SWorld& world)
{
  ColorValue maxColor(0, 0, 0);
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        const SPixel& here = world[x][y];
        maxColorValue(maxColor, here.color);
      }
  return maxColor;
}

void smear(SWorld& world, int sSize)
{
  int xSize = world.rows();
  int ySize = world.cols();

  matrix<Vector3d> newXyz(xSize, ySize);
  newXyz.set(Vector3d(0, 0, 0));

  for (int y = sSize; y < ySize - sSize; y++)
    for (int x = sSize; x < xSize - sSize; x++)
      {
        SPixel& h = world[x][y];
        if (h.valid)
          {
            Vector3d thisPos(h.position);
            Vector3d xyzSum(0, 0, 0);
            int vCount = 0;
            for (int dy = -sSize; dy <= sSize; dy++)
              {
                int yi = y + dy;
                for (int dx = -sSize; dx <= sSize; dx++)
                  {
                    int xi = x + dx;
                    const SPixel& here = world[xi][yi];
                    if (here.valid && (here.position - thisPos).length() < sSize)
                      {
                        xyzSum += here.position;
                        vCount++;
                      }
                  }
              }
            if (vCount > 0)
              newXyz[x][y] = xyzSum / vCount;
          }
      }
  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      world[x][y].position = newXyz[x][y];
}

void numberValidAndSelectedPixel(SWorld& world)
{
  int nr = 0;
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        if (world[x][y].valid && world[x][y].selected)
          {
            world[x][y].nr = nr;
            nr++;
          }
      }
}

void writePoints(ofstream& os, const SWorld& world)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        const SPixel& here = world[x][y];
        if (here.valid && here.selected)
          os << "P " << here.position.x << " " << here.position.y << " " << here.position.z << endl;
      }
}

void writeTriangle(ostream& os,
                   IPoint p1, IPoint p2, IPoint p3,
                   const SWorld& world,
                   const ColorValue& maxVal,
                   double maxLength,
                   bool ignoreColor)
{
  int n1 = world[p1.x][p1.y].nr;
  int n2 = world[p2.x][p2.y].nr;
  int n3 = world[p3.x][p3.y].nr;
  if (n1 >= 0 && n2 >= 0 && n3 >= 0)
    {
      // second selection criteria: max edge length
      Vector3d xyz1 = world[p1.x][p1.y].position;
      Vector3d xyz2 = world[p2.x][p2.y].position;
      Vector3d xyz3 = world[p3.x][p3.y].position;
      if (
        (xyz1 - xyz2).length() < maxLength &&
        (xyz2 - xyz3).length() < maxLength &&
        (xyz3 - xyz1).length() < maxLength
      )
        {
          if (!ignoreColor)
            {
              ColorValue c1 = world[p1.x][p1.y].color;
              ColorValue c2 = world[p2.x][p2.y].color;
              ColorValue c3 = world[p3.x][p3.y].color;
              ColorValue cc = (c1 + c2 + c3) * 0.3333;
              os << "C " << (double)cc.red / maxVal.red;
              os << " " << (double)cc.green / maxVal.green;
              os << " " << (double)cc.blue / maxVal.blue << endl;
            }
          os << "T " << n1 << " " << n2 << " " << n3 << endl;
        }
    }
}


/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      SelectBox selectBox(xMin, xMax, yMin, yMax, zMin, zMax);
      string textureFN;
      string phaseFN;
      string calibFN;
      FileName fn(baseFileName);
      if (outFile.empty())
        outFile = fn.getPath() + "/" + fn.getBaseName();
      fileNames(baseFileName, textureFN, phaseFN, calibFN);

      ColorImage textureImage;
      textureImage.read(textureFN);

      Image phaseImage;
      phaseImage.read(phaseFN);

      int xSize = textureImage.xsize;
      int ySize = textureImage.ysize;
      if (phaseImage.xsize != xSize || phaseImage.ysize != ySize)
        throw IceException("read files", "image sizes differ");

      if (display)
        {
          Show(ON, textureImage, "texture");
          Show(GRAY, phaseImage, "phase");
        }

      // create world matrix
      SWorld world(xSize, ySize);
      for (int y = 0; y < ySize; y++)
        for (int x = 0; x < xSize; x++)
          {
            world[x][y].color = textureImage.getPixel(x, y);
            world[x][y].phase = phaseImage.getPixel(x, y) / phaseResolution;
          }

      vector<double> para;
      char calibrationModel = 'p';
      if (calibFilename.empty())
        {
          // no given calib filename, use corresponding calib file
          FileName fn(calibFN);
          if (!readCalib(calibFN, para, calibrationModel))
            {
              // no directly associated calib file,
              // use first calib file in path
              vector<string> calFiles;
              Directory(calFiles, fn.getPath() + "/*cal", DIR_FILE);
              if (calFiles.empty())
                throw IceException("Load calib", "No file found");
              calibFN = fn.getPath() + "/" + calFiles[0];
              if (!readCalib(calibFN, para, calibrationModel))
                throw IceException("readCalib", "no calib found");
            }
        }
      else
        {
          calibFN = calibFilename;
          if (!readCalib(calibFN, para, calibrationModel))
            {
              throw IceException("readCalib", "Cannot read " + calibFilename);
            }
        }

      SLModel* slModel = nullptr;
      switch (calibrationModel)
        {
        case 'p':
        case 'a':
          slModel = new SLModel1();
          slModel->setPara(para);
          break;
        case 'c':
          slModel = new SLModel2();
          slModel->setPara(para);
        }

      if (verbose)
        {
          cout << "using parameter from " << calibFN << endl;
          slModel->printPara();
          cout << "computing 3d" << endl;
        }

      compute3d(*slModel, world);
      delete slModel;
      slModel = nullptr;

      ImageD depth;
      depth.create(xSize, ySize, -50, 400);
      depth.set(-100.0);
      for (int y = 0; y < ySize; y++)
        for (int x = 0; x < xSize; x++)
          {
            if (world[x][y].valid)
              depth.setPixel(x, y, world[x][y].position.z);
          }

      if (display)
        {
          Show(GRAY, depth, "depth");
        }

      Image state;
      state.create(xSize, ySize, 16);
      state.set(0);
      if (display)
        {
          Show(OVERLAY, state, "pixel state");
        }

      updateStateImage(world, state);
      if (verbose)
        cout << "selecting box" << endl;
      selectPixelInBox(world, selectBox);

      updateStateImage(world, state);

      if (verbose)
        cout << "getting max color" << endl;

      ColorValue maxVal = getMaxColorValue(world);

      // "low pass" xyz (test)
      if (sSize > 0)
        {
          if (verbose)
            cout << "filtering smear" << endl;
          smear(world, sSize);
        }

      numberValidAndSelectedPixel(world);

      if (verbose)
        cout << "writing points" << endl;

      // file for triangle viewer
      ofstream os("xyz.tv");
      // write valid and selected points to 3d file
      writePoints(os, world);

      IPoint dx(1, 0);
      IPoint dy(0, 1);

      if (verbose)
        cout << "writing triangles" << endl;

      for (int y = 0; y < ySize - 1; y++)
        for (int x = 0; x < xSize - 1; x++)
          {
            IPoint w(x, y);
            writeTriangle(os,
                          // w, w + dx, w + dy,
                          w, w + dy, w + dx,
                          world,
                          maxVal,
                          maxLength,
                          noColor);
            writeTriangle(os,
                          // w + dy, w + dx, w + dx + dy,
                          w + dx, w + dy, w + dx + dy,
                          world,
                          maxVal,
                          maxLength,
                          noColor);
          }
      os.close();

      if (display)
        {
          GetChar();
          Show(OFF, depth);
        }
    }
  catch (const IceException& ex)
    {
      cerr << "Exception: " << ex.what() << endl;
    }
  return OK;
}
