#include <fstream>
#include <iostream>
#include <string>

#include "v23d.h"
#include "image.h"
#include "FileName.h"

#include "to3d.h"

#include "v2trafo.h"
#include "v2file.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Extract 3d data in different formats
  para: filename, required, string, baseFileName, Filename of phase or texture image, ""
  opt: c, calibfile, string, calibFilename, Name of calibration file,""
  opt: p, phaseresolution, double, phaseResolution, Resolution of phase image, 32.0
  opt: x, xmin, double, xMin, minimum x, -10000
  opt: X, xmax, double, xMax, maximum x, 10000
  opt: y, ymin, double, yMin, minimum y, -10000
  opt: Y, ymax, double, yMax, maximum y, 10000
  opt: z, zmin, double, zMin, minimum z, -10000
  opt: Z, zmax, double, zMax, maximum z, 10000
  opt: l, maxlength, double, maxLength, maximum length of triangle edges, 1000

  opt: s, smooth, int, sSize, Smoothing surface in given surroundings, 0
  opt: f, fillphases, int, fillSize, Interpolate unknown phases from neighbours, 0
  opt: o, outfile, string, outFile, Name of output file, "world.tv"
  opt2: extension controls type of data
  opt2: .tv - triangle viewer format (tv)
  opt2: .xyz - point list with coordinates x, y and z
  opt2: .pov - povray file, use -P for mode selection
  opt2: .inc - povray include file, use -P for mode selection
  opt2: other extensions - pointlist with x, y and z and colors r, g, b
  opt: P, povraymode, char, povrayMode, Mode for povray file, 't'
  opt2: t - triangle
  opt2: m - mesh
  opt2: h - height field
  opt: n, nocolor, void, noColor, Ignore texture, false
  opt2:   storage of texture depends on output format
  opt: r, rotate, Void, rotateC, Rotate coordinates, false
  opt: d, display, void, display, display images, false
  opt: D, debug, Int, debug, print debug information, 0
  opt: v, verbose, Void, verbose, be verbose, false
  opt: h, help, usage, , Help
AppGen*/

void compute3d(const SLModel& model, SWorld& world)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        SPixel& here = world[x][y];
        if (here.phase != 0.0)
          {
            Point uv(x, y);
            model.reconstruct(uv, here.phase, here.position);
            here.valid = true;
          }
        else
          {
            here.valid = false;
          }
      }
}

void updateStateImage(const SWorld& world, Image& state)
{
  WindowWalker w(state);
  for (w.init(); !w.ready(); w.next())
    {
      const SPixel& here = world[w.x][w.y];
      int s = 0;
      if (!here.valid)
        s += 1;
      if (!here.selected)
        s += 2;
      state.setPixel(w, s);
    }
}

void selectPixelInBox(SWorld& world, SelectBox& box)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        SPixel& here = world[x][y];
        here.selected = box.inRange(here.position);
      }
}

void updateMaxColorValue(ColorValue& maxVal, const ColorValue& c)
{
  if (c.red > maxVal.red)
    maxVal.red = c.red;
  if (c.green > maxVal.green)
    maxVal.green = c.green;
  if (c.blue > maxVal.blue)
    maxVal.blue = c.blue;
}

ColorValue getMaxColorValue(const SWorld& world)
{
  ColorValue maxColor(0, 0, 0);
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        if (world[x][y].valid && world[x][y].selected)
          {
            const SPixel& here = world[x][y];
            updateMaxColorValue(maxColor, here.color);
          }
      }
  return maxColor;
}

void smear(SWorld& world, int sSize)
{
  int xSize = world.rows();
  int ySize = world.cols();

  matrix<Vector3d> newXyz(xSize, ySize);
  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      newXyz[x][y] = world[x][y].position;

  for (int y = sSize; y < ySize - sSize; y++)
    for (int x = sSize; x < xSize - sSize; x++)
      {
        const SPixel& h = world[x][y];
        if (h.valid)
          {
            Vector3d thisPos(h.position);
            Vector3d xyzSum(thisPos);
            int vCount = 1;
            for (int dy = -sSize; dy <= sSize; dy++)
              {
                int yi = y + dy;
                for (int dx = -sSize; dx <= sSize; dx++)
                  {
                    int xi = x + dx;
                    const SPixel& here = world[xi][yi];
                    if (here.valid && (here.position - thisPos).length() < sSize)
                      {
                        xyzSum += here.position;
                        vCount++;
                      }
                  }
              }
            if (vCount > 1)
              newXyz[x][y] = xyzSum / vCount;
          }
      }
  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      world[x][y].position = newXyz[x][y];
}

void numberValidAndSelectedPixel(SWorld& world)
{
  int nr = 0;
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        if (world[x][y].valid && world[x][y].selected)
          {
            world[x][y].nr = nr;
            nr++;
          }
      }
}

void tvWritePoints(ofstream& os, const SWorld& world)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        const SPixel& here = world[x][y];
        if (here.valid && here.selected)
          {
            if (!rotateC)
              os << "P " << here.position.x << " " << here.position.y << " " << here.position.z << endl;
            else
              os << "P " << here.position.x << " " << -here.position.y << " " << -here.position.z << endl;
          }
      }
}

void writePoints(ofstream& os, const SWorld& world, int n)
{
  int xSize = world.rows();
  int ySize = world.cols();

  for (int y = 0; y < ySize; y++)
    for (int x = 0; x < xSize; x++)
      {
        const SPixel& here = world[x][y];
        if (here.valid && here.selected)
          {
            os << here.position.x << " " << here.position.y << " " << here.position.z << " " ;
            if (n >= 6)
              os << here.color.red << " " << here.color.green << " " << here.color.blue;
            os << endl;
          }
      }
}

void tvWriteTriangle(ostream& os,
                     IPoint p1, IPoint p2, IPoint p3,
                     const SWorld& world,
                     const ColorValue& maxVal,
                     double maxLength,
                     bool ignoreColor)
{
  int n1 = world[p1.x][p1.y].nr;
  int n2 = world[p2.x][p2.y].nr;
  int n3 = world[p3.x][p3.y].nr;
  if (n1 >= 0 && n2 >= 0 && n3 >= 0)
    {
      // second selection criteria: max edge length
      Vector3d xyz1 = world[p1.x][p1.y].position;
      Vector3d xyz2 = world[p2.x][p2.y].position;
      Vector3d xyz3 = world[p3.x][p3.y].position;
      if (
        (xyz1 - xyz2).length() < maxLength &&
        (xyz2 - xyz3).length() < maxLength &&
        (xyz3 - xyz1).length() < maxLength
      )
        {
          if (!ignoreColor)
            {
              ColorValue c1 = world[p1.x][p1.y].color;
              ColorValue c2 = world[p2.x][p2.y].color;
              ColorValue c3 = world[p3.x][p3.y].color;
              ColorValue cc = (c1 + c2 + c3) * 0.3333;
#if 0
              int maxv = 1;
              if (cc.red > maxv) maxv = cc.red;
              if (cc.green > maxv) maxv = cc.green;
              if (cc.blue > maxv) maxv = cc.blue;
              double fak = 255.0 / maxv;
#else
              double fak = 1.0;
#endif
              os << "C " << cc.red* fak / maxVal.red;
              os << " " << cc.green* fak / maxVal.green;
              os << " " << cc.blue* fak / maxVal.blue << endl;
            }
          os << "T " << n1 << " " << n2 << " " << n3 << endl;
        }
    }
}

void povWriteTriangle(ostream& os,
                      IPoint p1, IPoint p2, IPoint p3,
                      const SWorld& world,
                      const ColorValue& maxVal,
                      double maxLength,
                      bool ignoreColor)
{
  int n1 = world[p1.x][p1.y].nr;
  int n2 = world[p2.x][p2.y].nr;
  int n3 = world[p3.x][p3.y].nr;
  if (n1 >= 0 && n2 >= 0 && n3 >= 0)
    {
      // second selection criteria: max edge length
      Vector3d xyz1 = world[p1.x][p1.y].position;
      Vector3d xyz2 = world[p2.x][p2.y].position;
      Vector3d xyz3 = world[p3.x][p3.y].position;
      if (
        (xyz1 - xyz2).length() < maxLength &&
        (xyz2 - xyz3).length() < maxLength &&
        (xyz3 - xyz1).length() < maxLength
      )
        {
          ColorValue c1 = world[p1.x][p1.y].color;
          ColorValue c2 = world[p2.x][p2.y].color;
          ColorValue c3 = world[p3.x][p3.y].color;
          ColorValue cc = (c1 + c2 + c3) * 0.3333;
#if 0
          int maxv = 1;
          if (cc.red > maxv) maxv = cc.red;
          if (cc.green > maxv) maxv = cc.green;
          if (cc.blue > maxv) maxv = cc.blue;
          double fak = 255.0 / maxv;
#else
          double fak = 1.0;
#endif
          double r, g, b;
          if (!ignoreColor)
            {
              r = cc.red * fak / maxVal.red;
              g = cc.green * fak / maxVal.green;
              b = cc.blue * fak / maxVal.blue;
            }
          else
            r = g = b = 1.0;
          os << "triangle {" << endl;
#if 0
          os << "//" << n1 << "," << n2 << "," << n3 << endl;
          os << "//" << p1 << "," << p2 << "," << p3 << endl;
#endif
          os << xyz1 << "," << xyz2 << "," << xyz3 << endl;
          if (!ignoreColor)
            os << "pigment { color rgb<" << r << "," << g << "," << b << ">}" << endl;
          os << "}" << endl;
        }
    }
}


/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      SelectBox selectBox(xMin, xMax, yMin, yMax, zMin, zMax);
      string textureFN;
      string phaseFN;
      string calibFN;
      FileName fn(baseFileName);

      if (outFile.empty())
        outFile = fn.getPath() + "/" + fn.getBaseName();
      else if (outFile[0] == '.') // only extension given
        outFile = fn.getPath() + "/" + fn.getBaseName() + outFile;

      FileName outFileName(outFile);
      cout << "outFileName: " << string(outFileName) << endl;

      fileNames(baseFileName, textureFN, phaseFN, calibFN);

      ColorImage textureImage;
      textureImage.read(textureFN);

      Image phaseImage;
      phaseImage.read(phaseFN);

      int xSize = textureImage.xsize;
      int ySize = textureImage.ysize;
      if (phaseImage.xsize != xSize || phaseImage.ysize != ySize)
        throw IceException("read files", "image sizes differ");

      if (display)
        {
          Show(ON, textureImage, "texture");
          Show(GRAY, phaseImage, "phase");
        }

      // improvements of phases
      if (fillSize > 0)
        {
          if (verbose)
            {
              cout << "interpolating unknown phases from neighbours" << endl;
            }
          Image tempPhaseImage;
          tempPhaseImage.copy(phaseImage);
          // for the moment we use a 3*3 square independent of fillSize
          for (int y = 1; y < ySize - 1; y++)
            for (int x = 1; x < xSize - 1; x++)
              {
                if (phaseImage.getPixel(x, y) == 0) // phase invalid
                  {
                    int counter = 0;
                    double phaseSum = 0.0;
                    for (int yn = y - 1; yn <= y + 1; yn++)
                      for (int xn = x - 1; xn <= x + 1; xn++)
                        {
                          double phaseN = tempPhaseImage.getPixel(xn, yn);
                          if (phaseN > 0)
                            {
                              counter++;
                              phaseSum += phaseN;
                            }
                        }
                    if (counter > 1) // TODO: tune >n !!
                      {
                        phaseImage.setPixel(x, y, phaseSum / counter);
                      }
                  }
              }
        }

      // create world matrix
      SWorld world(xSize, ySize);
      for (int y = 0; y < ySize; y++)
        for (int x = 0; x < xSize; x++)
          {
            world[x][y].color = textureImage.getPixel(x, y);
            world[x][y].phase = phaseImage.getPixel(x, y) / phaseResolution;
          }

      vector<double> para;
      char calibrationModel = 'p';
      if (calibFilename.empty())
        {
          // no given calib filename, use corresponding calib file
          FileName fn(calibFN);
          if (!readCalib(calibFN, para, calibrationModel))
            {
              // no directly associated calib file,
              // use first calib file in path
              vector<string> calFiles;
              Directory(calFiles, fn.getPath() + "/*cal", DIR_FILE);
              if (calFiles.empty())
                throw IceException("Load calib", "No file found");
              calibFN = fn.getPath() + "/" + calFiles[0];
              if (!readCalib(calibFN, para, calibrationModel))
                throw IceException("readCalib", "no calib found");
            }
        }
      else
        {
          calibFN = calibFilename;
          if (!readCalib(calibFN, para, calibrationModel))
            {
              throw IceException("readCalib", "Cannot read " + calibFilename);
            }
        }

      SLModel* slModel = nullptr;
      switch (calibrationModel)
        {
        case 'p':
        case 'a':
          slModel = new SLModel1();
          slModel->setPara(para);
          break;
        case 'c':
          slModel = new SLModel2();
          slModel->setPara(para);
        }

      if (verbose)
        {
          cout << "using parameter from " << calibFN << endl;
          slModel->printPara();
          cout << "computing 3d" << endl;
        }

      compute3d(*slModel, world);
      delete slModel;
      slModel = nullptr;

      ImageD depth;
      depth.create(xSize, ySize, -50, 400);
      depth.set(-100.0);
      for (int y = 0; y < ySize; y++)
        for (int x = 0; x < xSize; x++)
          {
            if (world[x][y].valid)
              depth.setPixel(x, y, world[x][y].position.z);
          }

      if (display)
        {
          Show(GRAY, depth, "depth");
        }

      Image state;
      state.create(xSize, ySize, 16);
      state.set(0);
      if (display)
        {
          Show(OVERLAY, state, "pixel state");
        }

      updateStateImage(world, state);
      if (verbose)
        cout << "selecting box" << endl;
      selectPixelInBox(world, selectBox);

      updateStateImage(world, state);

      if (verbose)
        cout << "getting max color" << endl;
      ColorValue maxVal = getMaxColorValue(world);
      if (verbose)
        cout << "maximum color value: " << maxVal << endl;

      // "low pass" xyz (test)
      if (sSize > 0)
        {
          if (verbose)
            cout << "smoothing" << endl;
          smooth(world, sSize);
        }

      numberValidAndSelectedPixel(world);

      string ext = outFileName.getExtension();

      if (ext == "tv")
        {
          // file for triangle viewer
          if (verbose)
            cout << "writing tv file" << endl;
          string ofn(outFileName);
          ofstream os(ofn);

          // write valid and selected points to 3d file
          if (verbose)
            cout << "writing points" << endl;
          tvWritePoints(os, world);

          IPoint dx(1, 0);
          IPoint dy(0, 1);

          if (verbose)
            cout << "writing triangles" << endl;

          for (int y = 0; y < ySize - 1; y++)
            for (int x = 0; x < xSize - 1; x++)
              {
                IPoint w(x, y);
                tvWriteTriangle(os,
                                //w, w + dx, w + dy,
                                w, w + dy, w + dx,
                                world,
                                maxVal,
                                maxLength,
                                noColor);
                tvWriteTriangle(os,
                                // w + dy, w + dx, w + dx + dy,
                                w + dx, w + dy, w + dx + dy,
                                world,
                                maxVal,
                                maxLength,
                                noColor);
              }
          os.close();
        }
      else if (ext == "xyz")
        {
          if (verbose)
            cout << "writing xyz file" << endl;
          // write point file
          string ofn(outFileName);
          ofstream os(ofn);
          writePoints(os, world, 3);
        }
      else if (ext == "pov" || ext == "inc")
        {
          if (verbose)
            cout << "writing pov file" << endl;

          // write povray file
          string ofn(outFileName);
          ofstream os(ofn);
          switch (povrayMode)
            {
            case 't':
            {
              if (verbose)
                cout << "writing triangles" << endl;

              IPoint dx(1, 0);
              IPoint dy(0, 1);

              for (int y = 0; y < ySize - 1; y++)
                for (int x = 0; x < xSize - 1; x++)
                  {
                    IPoint w(x, y);
                    povWriteTriangle(os,
                                     //w, w + dx, w + dy,
                                     w, w + dy, w + dx,
                                     world,
                                     maxVal,
                                     maxLength,
                                     noColor);
                    povWriteTriangle(os,
                                     // w + dy, w + dx, w + dx + dy,
                                     w + dx, w + dy, w + dx + dy,
                                     world,
                                     maxVal,
                                     maxLength,
                                     noColor);
                  }
            }
            break;
            case 'm':
              break;
            case 'h':
              break;
            }
        }
      else // default file with x,y,z, r,g,b
        {
          if (verbose)
            cout << "writing x,y,z, r,g,b file" << endl;
          string ofn(outFileName);
          ofstream os(ofn);
          writePoints(os, world, 6);
        }
      if (display)
        {
          GetChar();
          Show(OFF, depth);
        }
    }
  catch (const IceException& ex)
    {
      cerr << "Exception: " << ex.what() << endl;
    }
  return OK;
}
