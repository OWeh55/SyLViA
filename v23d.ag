#include <string>
#include <vector>
#include <limits>
#include <iostream>
#include <fstream>

#include <image.h>

#include "v23d.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: analyse video from coded light
  para: filename, optional, string, fnb, Video filename, ""

  opt: F, first, int, first, First frame to use, 0
  opt: L, last, int, last, Last frame to use, -1
  opt2: last = -1 for all frames
  opt: p, period, int, period, Approximate cycle length (as hint for program), -1

  opt: t, threshold, Double, threshold, Threshold for detection, 2

  opt: s, sequence, String, sequenceDescription, Description of sequence, "sc123456789"
  opt2: Meaning of characters
  opt2: s - sinus function
  opt2: c - sinus function
  opt2: 1,2,...,9 - gray code bit
  opt2: all pattern are projected as positive and negative
  opt2: Sequence is expected to start with black to white change
  opt: D, debug, Int, debug, Debug flags (bitwise or), 0
  opt2:  1 - write gnuplot files in cycle detection
  opt2:  2 - debug boundary detection
  opt2:  4 - debug pattern extraction
  opt2:  8 - debug phase detection
  opt2: 16 - debug read video
  opt: v, verbose, Void, verbose, Be verbose, false
  opt: h, help, usage, , Hilfe
AppGen*/

// globals for convenience
// video
int nFrames;
int xSize;
int ySize;

// sequence of pattern
int sequenceLength;

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      if (debug != 0)
        verbose = true;
      // read video
      vector<Image> cv;
      int fps = 0;
      readImages(fnb, cv, fps, first, last, 'g');

      nFrames = cv.size();
      if (nFrames == 0)
        throw IceException("readImages", "No frames read");
      if (verbose)
        cout << "read " << nFrames << " images" << endl;
      xSize = cv[0].xsize;
      ySize = cv[0].ysize;

      // prepare globals for sequence
      sequenceLength = sequenceDescription.length() * 2 + 2;
      if (verbose)
        cout << "sequence: " << sequenceDescription << "   (" << sequenceLength << " pattern) " << endl;

      vector<double> sequenceBoundaries;
      analysis(cv, fps, sequenceBoundaries, period);
      if (verbose)
        {
          cout << "period : " << period << endl;
          int sequences = sequenceBoundaries.size() - 1;
          cout << "found " << sequences << " sequences" << endl;
          for (int i = 0; i < sequences; i++)
            cout << sequenceBoundaries[i] << " ... " << sequenceBoundaries[i + 1] << endl;
        }

      vector<vector<ImageD>> extractedPattern;
      extractPattern(cv, sequenceBoundaries, extractedPattern);

      vector<ImageD> phaseImages;
      vector<Image> maskImages;
      calcPhases(extractedPattern, phaseImages, maskImages, threshold);
    }
  catch (IceException& ex)
    {
      cerr << "exception (ICE): " << ex.what() << endl;
    }
  catch (const char* msg)
    {
      cerr << "exception (char*): " << msg << endl;
    }
  return 0;
}
