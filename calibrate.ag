#include <string>
#include <vector>
#include <iostream>

#include <image.h>
#include "FileName.h"
#include "v2polygon.h"

#include "v2file.h"
#include "v2trafo.h"
#include "calibrate.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Calibrate projector and camera
  para: filename, required, string, baseFileName, Filename of phase or texture image, ""
  opt: p, phaseresolution, double, phaseResolution, resolution of phase image, 32.0
  opt: L, localsegsize, Int, localSegSize, window size for local segmentation, 11
  opt: l, localseglevel, Int, localSegLevel, threshold for local segmentation, 15
  opt: d, display, void, display, show images, false
  opt: D, debug, Int, debug, output debug information (bitmask), 0
  opt2:  1  result of local segmentation
  opt2:  2  found squares
  opt2:  4  features of preselected conturs
  opt: v, verbose, Void, verbose, be verbose, false
  opt: h, help, usage, usage, Help, false
AppGen*/

double getCenterPhase(const Image &phase,const Contur &c)
{
  Point centroid = Centroid(c);
  RegionWalker w(c);
  Polynom2d1o fn;
  fn.FitInit();
  for (w.init();!w.ready();w.next())
    {
      double phaseD = phase.getPixel(w);
      if (phaseD != 0.0)
	fn.FitVal(w,phaseD);
      
    }
  try {
    fn.FitFinish();
    return fn(centroid);
  }
  catch(const IceException &ex)
    {
      // fit finish fails if not enough values teached
      // we ignore this and return 0.0
    }
  return 0.0;
}

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      string textureFN;
      string phaseFN;
      string calFN;

      fileNames(baseFileName, textureFN, phaseFN, calFN);

      if (verbose)
        {
          cout << "using files: " << endl;
          cout << "      " << textureFN << endl;
          cout << "      " << phaseFN << endl;
          cout << "store result in:" << endl;
          cout << "      " << calFN << endl;
        }

      int xs, ys, mv, ch;
      InfImgFile(textureFN, xs, ys, mv, ch);

      ColorImage texture;
      texture.read(textureFN);
      if (display)
        Show(ON, texture);
      Image tGray;
      Image tMark;
      tGray.create(xs, ys, mv);
      tMark.create(xs, ys, 15);
      tMark.set(0);
      if (display)
        Show(OVERLAY, tGray, tMark);
      WindowWalker w(tGray);
      for (w.init(); !w.ready(); w.next())
        {
          tGray.setPixel(w, mv - texture.getPixel(w).getGray());
        }

      Trafo trA, trB;
      vector<Contur> squares;
      findMarker(tGray, tMark, squares, trA, trB);

      // cout << trA.getMatrix() << endl;
      Trafo trAi = trA.inverse();
      Trafo trBi = trB.inverse();

      int nSquares = squares.size();
      vector<Point> squarePos(nSquares);
      for (int i = 0; i < nSquares; i++)
        {
          squarePos[i] = Centroid(squares[i]);
        }

      Image phase;
      phase.read(phaseFN);

      vector<Point> uv;
      vector<double> u2;
      vector<Vector3d> xyz;
      // find square markers in 2 planes
      // create list of references
      for (int y = 0; y < 6; y++)
        for (int x = 2; x < 6; x++)
          {
            Point p((x + 0.5) * rasterMM, (y + 0.5) * rasterMM);
            double dmin = 1e5;
            int minIdx = -1;
            for (int i = 0; i < nSquares; i++)
              {
                Point pp;
                transform(trAi, squarePos[i], pp);
                double dist = (pp - p).length();
                if (dist < dmin)
                  {
                    minIdx = i;
                    dmin = dist;
                  }
              }
            // cout << dmin << endl;
            // found nearest square
            if (dmin < 0.3 * rasterMM)
              {
                // marker found
		double phaseD = getCenterPhase(phase,squares[minIdx]);
                //int phaseI = phase.getPixel(IPoint(squarePos[minIdx]));
                if (phaseD > 0) // phase valid?
                  {
                    uv.push_back(squarePos[minIdx]);
                    u2.push_back(phaseD / phaseResolution);
                    xyz.push_back(Vector3d(p.x, p.y, 0));
                    Line(squarePos[minIdx].x, squarePos[minIdx].y, p.x, p.y, 1, DEFAULT, tMark);
                  }
              }
          }

      for (int y = 0; y < 6; y++)
        for (int x = 0; x < 2; x++)
          {
            Point p((x + 0.5) * rasterMM, (y + 0.5) * rasterMM);
            double dmin = 1e5;
            int minIdx = -1;
            for (int i = 0; i < nSquares; i++)
              {
                Point pp;
                transform(trBi, squarePos[i], pp);
                double dist = (pp - p).length();
                if (dist < dmin)
                  {
                    minIdx = i;
                    dmin = dist;
                  }
              }
            // cout << dmin << endl;
            // found nearest square
            if (dmin < 0.3 * rasterMM)
              {
                // marker found
		double phaseD = getCenterPhase(phase,squares[minIdx]);
		// int phaseI = phase.getPixel(IPoint(squarePos[minIdx]));
                if (phaseD > 0) // phase valid?
                  {
                    uv.push_back(squarePos[minIdx]);
                    u2.push_back(phaseD / phaseResolution);
                    xyz.push_back(Vector3d(p.x, p.y, deltaZ));
                    Line(squarePos[minIdx].x, squarePos[minIdx].y, p.x, p.y, 2, DEFAULT, tMark);
                  }
              }
          }
      if (verbose)
        {
          cout << "found " << uv.size() << " references" << endl;
        }
      /*
      for (int i = 0; i < uv.size(); i++)
        cout << uv[i] << " " << u2[i] << " " << xyz[i] << endl;
      */

      vector<double> cData = calculateParameter(uv, u2, xyz);
      if (verbose)
        printPara(cData);

      writeCalib(calFN, cData);
      if (display)
        GetChar();
    }
  catch (const IceException& ex)
    {
      cerr << "Exception: " << ex.what() << endl;
    }
  catch (const char* msg)
    {
      cerr << "Exception: " << msg << endl;
    }
  return OK;
}
