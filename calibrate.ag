#include <string>
#include <vector>
#include <iostream>

#include <image.h>

#include "v2polygon.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Calibrate proyector and camera
  para: filename, required, string, fnb, Filename of phase or texture image, ""

  opt: d, display, void, display, Darstellung der Bilder, false
  opt: v, verbose, Void, verbose, Viele Meldungen, false
AppGen*/


void findXV(Image& tGray, Image& tMark, Contur& X, Contur& V)
{
  Image imgo;
  imgo.create(tMark);
  LocalSeg(tGray, imgo, 15, 25);

  IPoint start(0, 0);
  while (SearchStart(imgo, tMark, LocalSegObj, 123, 5, start) == OK)
    {
      Contur c = CalcContur(imgo, tMark, LocalSegObj, 123, start);

      if (c.isValid())
        {
          if (c.isClosed())                  // geschlossene Konturen f√ºllen
            {
              if (!c.isHole())
                {
                  FillRegion(c, 2, tMark);
                }
            }
          MarkContur(c, 1, tMark);
        }
      else
        tMark.setPixel(start, 1);
    }
}

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      int xs, ys, mv, ch;
      InfImgFile(fnb, xs, ys, mv, ch);
      ColorImage texture;
      texture.read(fnb);
      if (display)
        Show(ON, texture);
      Image tGray;
      Image tMark;
      tGray.create(xs, ys, mv);
      tMark.create(xs, ys, 15);
      tMark.set(0);
      if (display)
        Show(OVERLAY, tGray, tMark);
      WindowWalker w(tGray);
      for (w.init(); !w.ready(); w.next())
        {
          tGray.setPixel(w, mv - texture.getPixel(w).getGray());
        }
      Contur X, V;
      findXV(tGray, tMark, X, V);
      GetChar();
    }
  catch (const IceException& ex)
    {
      cerr << "Exception: " << ex.what() << endl;
    }
  catch (const char* msg)
    {
      cerr << "Exception: " << msg << endl;
    }
  return OK;
}
