#include <fstream>
#include <iostream>
#include <string>
#include "image.h"
#include "FileName.h"

#include "v2trafo.h"
#include "v2file.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Extract 3d data for triangle viewer
  para: filename, required, string, baseFileName, Filename of phase or texture image, ""
  opt: c, calibfile, string, calibFilename, Name of calibration file,""
  opt: p, phaseresolution, double, phaseResolution, Resolution of phase image, 32.0
  opt: d, display, void, display, display images, false
  opt: D, debug, Void, debug, print debug information, false
  opt: v, verbose, Void, verbose, be verbose, false
AppGen*/

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  try
    {
      string textureFN;
      string phaseFN;
      string calibFN;
      fileNames(baseFileName, textureFN, phaseFN, calibFN);
      ColorImage textureImage;
      textureImage.read(textureFN);
      Image phaseImage;
      phaseImage.read(phaseFN);
      if (display)
        {
          Show(ON, textureImage);
          Show(GRAY, phaseImage);
        }

      vector<double> para;

      if (calibFilename.empty())
        {
          FileName fn(calibFN);
          if (!readCalib(calibFN, para))
            {
              vector<string> calFiles;
              Directory(calFiles, fn.getPath() + "/*cal", DIR_FILE);
              if (calFiles.empty())
                throw IceException("Load calib", "No file found");
              calibFN = fn.getPath() + "/" + calFiles[0];
              readCalib(calibFN, para);
            }
        }
      else
        {
          calibFN = calibFilename;
          readCalib(calibFN, para);
        }
      if (verbose)
        {
          cout << "using parameter from " << calibFN << endl;
          printPara(para);
        }

      // vorerst schreiben wir eine Datei von Punktkoordinaten
      ofstream os("xyz.txt");

      ImageD depth;
      depth.create(phaseImage.xsize, phaseImage.ysize, -400, 400);
      depth.set(400.0);
      if (display)
        {
          Show(GRAY, depth, "depth");
        }
      WindowWalker w(phaseImage);
      for (w.init(); !w.ready(); w.next())
        {
          int hPhase = phaseImage.getPixel(w);
          if (hPhase != 0)
            {
              Point uv(w);
              double u2 = hPhase / phaseResolution;
              Vector3d xyz;
              reconstruct(para, uv, u2, xyz);
              depth.setPixel(w, xyz.z);
	      // we invert y to get a right handed system
              os << xyz.x << " " << -xyz.y << " " << xyz.z << " ";
              ColorValue cv = textureImage.getPixel(w);
              os << cv.red << " " << cv. green << " " << cv.blue << endl;
              //              cout << xyz << endl;
            }
        }
      os.close();

      if (display)
        {
          GetChar();
          Show(OFF, depth);
        }
    }
  catch (const IceException& ex)
    {
      cerr << "Exception: " << ex.what() << endl;
    }
  return OK;
}
