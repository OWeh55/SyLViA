#include <fstream>
#include <iostream>
#include <string>
#include "image.h"
#include "FileName.h"

#include "v2trafo.h"
#include "v2file.h"

/*AppGen:Global*/

using namespace std;

/*AppGen
  prog: Extract 3d data to triangle viewer
  para: filename, required, string, baseFileName, Filename of phase or texture image, ""
  opt: p, phaseresolution, double, phaseResolution, Aufl√∂sung der Phase, 32.0
  opt: d, display, void, display, Darstellung der Bilder, false
  opt: D, debug, Void, debug, Debug-Information ausgeben, false
  opt: v, verbose, Void, verbose, Viele Meldungen, false
AppGen*/

/*AppGen:Main*/
int main(int argc, char** argv)
{
  /*AppGen:MainEnd*/
  string textureFN;
  string phaseFN;
  string calibFN;
  fileNames(baseFileName, textureFN, phaseFN, calibFN);
  ColorImage textureImage;
  textureImage.read(textureFN);
  Show(ON, textureImage);
  Image phaseImage;
  phaseImage.read(phaseFN);
  Show(GRAY, phaseImage);

  FileName fn(calibFN);
  vector<double> para;
  if (!readCalib(calibFN, para))
    {
      vector<string> calFiles;
      Directory(calFiles, fn.getPath() + "/*cal", DIR_FILE);
      if (calFiles.empty())
        throw IceException("Load calib", "No file found");
      cout << calFiles[0] << endl;
      readCalib(fn.getPath() + "/" + calFiles[0], para);
    }

  // vorerst schreiben wir eine Datei von Punktkoordinaten
  ofstream os("xyz.txt");

  WindowWalker w(phaseImage);
  for (w.init(); !w.ready(); w.next())
    {
      int hPhase = phaseImage.getPixel(w);
      if (hPhase != 0)
        {
          Point uv(w);
          double u2 = hPhase / phaseResolution;
          Vector3d xyz;
          reconstruct(para, uv, u2, xyz);
          os << xyz.x << " " << xyz.y << " " << xyz.z << endl;
        }
    }
  os.close();




  GetChar();
  return OK;
}
